// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2024 18:26:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Enable;
// wires                                               
wire aLCC;
wire aLDC;
wire aMCC;
wire aMDC;
wire bLCC;
wire bLDC;
wire bMCC;
wire bMDC;
wire cLCC;
wire cLDC;
wire cMCC;
wire cMDC;
wire dLCC;
wire dLDC;
wire dMCC;
wire dMDC;
wire eLCC;
wire eLDC;
wire eMCC;
wire eMDC;
wire fLCC;
wire fLDC;
wire fMCC;
wire fMDC;
wire gLCC;
wire gLDC;
wire gMCC;
wire gMDC;

// assign statements (if any)                          
lab2 i1 (
// port map - connection between master ports and signals/registers   
	.aLCC(aLCC),
	.aLDC(aLDC),
	.aMCC(aMCC),
	.aMDC(aMDC),
	.bLCC(bLCC),
	.bLDC(bLDC),
	.bMCC(bMCC),
	.bMDC(bMDC),
	.cLCC(cLCC),
	.cLDC(cLDC),
	.clk(clk),
	.cMCC(cMCC),
	.cMDC(cMDC),
	.dLCC(dLCC),
	.dLDC(dLDC),
	.dMCC(dMCC),
	.dMDC(dMDC),
	.eLCC(eLCC),
	.eLDC(eLDC),
	.eMCC(eMCC),
	.eMDC(eMDC),
	.Enable(Enable),
	.fLCC(fLCC),
	.fLDC(fLDC),
	.fMCC(fMCC),
	.fMDC(fMDC),
	.gLCC(gLCC),
	.gLDC(gLDC),
	.gMCC(gMCC),
	.gMDC(gMDC)
);
initial 
begin 
#100000000 $finish;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	#100000;
end 
endmodule

